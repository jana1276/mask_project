# 1. تحميل الداتا
!git clone https://github.com/prajnasb/observations.git
import os
import shutil

base_path = "/content/observations/experiements/data"

# إنشاء مجلدات جديدة
os.makedirs("dataset/with_mask", exist_ok=True)
os.makedirs("dataset/without_mask", exist_ok=True)

# نسخ الصور
for img in os.listdir(os.path.join(base_path, "with_mask")):
    shutil.copy(os.path.join(base_path, "with_mask", img), "dataset/with_mask")

for img in os.listdir(os.path.join(base_path, "without_mask")):
    shutil.copy(os.path.join(base_path, "without_mask", img), "dataset/without_mask")
# 2. تجهيز البيانات وتدريب الموديل
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.optimizers import Adam

# Image Augmentation + validation split
train_datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)

train = train_datagen.flow_from_directory(
    'dataset',
    target_size=(100, 100),
    batch_size=16,
    class_mode='categorical',
    subset='training'
)

val = train_datagen.flow_from_directory(
    'dataset',
    target_size=(100, 100),
    batch_size=16,
    class_mode='categorical',
    subset='validation'
)

# بناء الموديل
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(100, 100, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(2, activation='softmax')
])

model.compile(optimizer=Adam(), loss='categorical_crossentropy', metrics=['accuracy'])

# تدريب الموديل
model.fit(train, validation_data=val, epochs=5)
# 3. Gradio app للتصنيف
import gradio as gr
import numpy as np
from tensorflow.keras.preprocessing.image import img_to_array
from PIL import Image

# استخراج أسماء الكلاسات
labels = list(train.class_indices.keys())

def predict(img):
    try:
        # تأكد إن الصورة من النوع الصحيح
        if not isinstance(img, Image.Image):
            img = Image.fromarray(img)

        # معالجة الصورة لتتناسب مع الموديل
        img = img.resize((100, 100))
        img_array = img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)

        # التنبؤ
        prediction = model.predict(img_array)
        return {labels[i]: float(prediction[0][i]) for i in range(2)}

    except Exception as e:
        return f"❌ Error during prediction:\n{str(e)}"

# تشغيل الواجهة
gr.Interface(
    fn=predict,
    inputs=gr.Image(),
    outputs=gr.Label(num_top_classes=2)
).launch(share=True)
model.save("model.keras")
from google.colab import files
files.download("model.keras")